
function benchmark(; n_trials::Int=20, dataset::Int=2)
    results = Vector{Dict{String,
                Dict{String,Vector{Tuple{Int,Float64}}
                }}}()
    for dataset in [1]
        push!(results, Dict{String,Dict{String,Vector{Tuple{Int,Int}}}}())
        # results[dataset]["bad_random_start"] = Dict{String,Vector{Tuple{Int,Float64}}}()
        # results[dataset]["good_random_start"] = Dict{String,Vector{Tuple{Int,Float64}}}()
        # results[dataset]["optimized_start"] = Dict{String,Vector{Tuple{Int,Float64}}}()

        problems = parse_file("./benchmark_problems/mdmkp_ct$(dataset).txt")

        i = 1
        for problem in problems[1:n_trials]
            println("yeet $i")
            i+=1
            bad_random_start = random_init(problem, 10, force_valid=false)
            good_random_start = random_init(problems[1], 1000, force_valid=false)
            sort!(good_random_start, by=x->x.score)

            optimized_start = deepcopy(good_random_start[1:50])
            GA2 = return_common_metaheuristics(n=1, timelimit=10)["GA2"]
            GA2(optimized_start, problem)
            sort!(optimized_start, by=x->x.score)
            optimized_start = optimized_start[1:10]

            good_random_start = good_random_start[1:10]

            for (pop, popname) in [
                    (optimized_start, "optimized start"),
                    (good_random_start, "good random start"),
                    (bad_random_start, "bad random start")]
                if !(popname in keys(results[dataset]))
                    results[dataset][popname] = Dict{String,Vector{Tuple{Int,Float64}}}()
                end
                for (alg, algname) in [
                        (control, "control"),
                        (greedy_flip, "exhgreedy flip"),
                        (eager_flip, "exheager flip"),
                        (greedy_swap, "exhgreedy swap"),
                        (eager_swap, "exheager swap"),
                        (exhflip_then_exhswap, "exhgreedy flip then exhgreedy swap"),
                        (exh_flip_and_swap, "exh greedyflip then greedyswap"),
                        (exh_flip_or_swap, "exh flip or swap")
                    ]
                    if !(algname in keys(results[dataset][popname]))
                        results[dataset][popname][algname] = Vector{Tuple{Int,Float64}}()
                    end
                    for sol in pop
                        start_time = time()
                        score = alg(deepcopy(sol), problem).score
                        end_time = time()
                        push!(results[dataset][popname][algname], (score, end_time - start_time))
                    end
                end
            end
        end
    end
    return results
end
